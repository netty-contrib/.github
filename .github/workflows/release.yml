name: Release
on:
  workflow_call:
    inputs:
      version:
        description: 'The version being released (pom.xml files will be updated) - leave empty for Maven default'
        required: false
        type: string
        default: ''
      netty:
        description: 'The version range to use for the Netty Core dependencies - will use value from pom.xml if empty'
        required: false
        type: string
        default: ''
      java-version:
        description: 'The version of Java to use for building'
        required: false
        type: string
        default: '11'

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out project
        uses: actions/checkout@v2

      # Configure Java
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: "${{ inputs.java-version }}"
          cache: 'maven'

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Configure Git
        run: |
          git config user.name "Netty Project Bot on behalf of ${{ github.actor }}"
          git config user.email "netty-project-bot@users.noreply.github.com"

      - name: Configure Maven Release Repository
        uses: s4u/maven-settings-action@v2
        with:
          servers: |
            [{
              "id": "sonatype-nexus",
              "username": "${{ secrets.SONATYPE_USERNAME }}",
              "password": "${{ secrets.SONATYPE_PASSWORD }}"
            }]

      # See https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions#setting-an-environment-variable
      - name: Inspect Project (with given version)
        if: ${{ inputs.version }}
        run: |
          echo "netty_snapshot=$(mvn help:evaluate -Dexpression=netty.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "tag=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-${{ inputs.version }}" >> $GITHUB_ENV
          echo "inputs_version=${{ inputs.version }}" >> $GITHUB_ENV
      - name: Inspect Project (with Maven computed version)
        if: ${{ ! inputs.version }}
        run: |
          echo "netty_snapshot=$(mvn help:evaluate -Dexpression=netty.version -q -DforceStdout)" >> $GITHUB_ENV
          mvn release:update-versions -DautoVersionSubmodules=true
          echo "inputs_version=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout | sed s/-SNAPSHOT//)" >> $GITHUB_ENV
          git restore **/pom.xml
          echo "tag=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-${{ env.inputs_version }}" >> $GITHUB_ENV

      - name: Set Netty Core Version
        if: ${{ inputs.netty }}
        run: |
          mvn versions:set-property -Dproperty=netty.version '-DnewVersion=${{ inputs.netty }}'

      - name: Verify Build
        run: |
          mvn clean install -B -ntp -DperformRelease

      - name: Update versions for release
        if: ${{ inputs.netty }}
        run: |
          git add .
          git commit -m 'Update versions for release'

      - name: Prepare release with Maven
        run: mvn -B -ntp --file pom.xml release:prepare -DpreparationGoals=clean -DskipTests '-DreleaseVersion=${{ env.inputs_version }}' '-Dtag=${{ env.tag }}' -Drelease.gpg.keyname=${{ secrets.GPG_KEYNAME }} -Drelease.gpg.passphrase=${{ secrets.GPG_PASSPHRASE }}

      - name: Perform release with Maven
        run: mvn -B -ntp --file pom.xml release:perform -Drelease.gpg.keyname=${{ secrets.GPG_KEYNAME }} -Drelease.gpg.passphrase=${{ secrets.GPG_PASSPHRASE }}

      - name: Restore versions for development
        if: ${{ inputs.netty }}
        run: |
          mvn versions:set-property -Dproperty=netty.version '-DnewVersion=${{ env.netty_snapshot }}'

      - name: Prepare for next development version
        run: |
          mvn versions:commit
          git add .
          git commit -m 'Update versions for development'
          git push --tags

      - name: Rollback release on failure
        if: ${{ failure() }}
        # Rollback the release in case of failure
        run: |
          mvn -B -ntp --file pom.xml release:rollback
          git push origin :"${{ env.tag }}"
